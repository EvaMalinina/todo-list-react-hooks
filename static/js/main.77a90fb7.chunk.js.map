{"version":3,"sources":["components/FormInput.jsx","components/List.jsx","components/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","background","border","color","height","padding","whiteSpace","margin","label","width","TodoCreator","theme","todo","setTodo","clearInput","inputRef","isInputEmpty","preventSubmit","classes","className","ThemeProvider","FormControl","TextField","id","value","variant","onChange","e","target","onFocus","ref","aria-describedby","onKeyPress","FormHelperText","Button","type","alt","backgroundColor","li","borderBottom","TodoList","todos","completeTodo","editTodo","deleteTodo","saveTodo","noteRef","React","useState","checked","setChecked","UniqKey","handleToggle","inx","currentIndex","indexOf","newChecked","push","splice","List","map","labelId","ListItem","role","undefined","dense","button","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","onClick","isEditing","defaultValue","text","element","current","IconButton","aria-label","ListItemText","primary","style","textDecoration","isCompleted","ListItemSecondaryAction","createMuiTheme","palette","main","Form","newTodo","setNewTodo","setTodos","useRef","setInputEmpty","key","preventDefault","addTodo","newTodos","console","log","useEffect","onSubmit","focus","newArr","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77a90fb7.chunk.js","sourcesContent":["import  React from 'react';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        background: 'linear-gradient(45deg, gray 30%, black 90%)',\r\n        border: 0,\r\n        color: 'white',\r\n        height: 30,\r\n        padding: '0 10px',\r\n        whiteSpace: 'nowrap',\r\n        margin: '15px 0 0 20px',\r\n    },\r\n    label: {\r\n        width: '80%'\r\n    }\r\n});\r\n\r\n\r\nconst TodoCreator = ({ theme, todo, setTodo, clearInput, inputRef, isInputEmpty, preventSubmit }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className=\"form__input\">\r\n            <ThemeProvider theme={theme}>\r\n                <FormControl   className={classes.label}>\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"What's need to be done?\"\r\n                        value={todo}\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => setTodo(e.target.value)}\r\n                        onFocus={clearInput}\r\n                        ref={inputRef}\r\n                        aria-describedby=\"component-error-text\"\r\n                        onKeyPress={preventSubmit}\r\n                    />\r\n\r\n                    { !isInputEmpty ?\r\n                        <></>\r\n                        :\r\n                        <>\r\n                            <FormHelperText id=\"component-error-text\">Task can't be empty</FormHelperText>\r\n                        </>\r\n                    }\r\n                </FormControl>\r\n                <Button\r\n                    type=\"submit\"\r\n                    alt=\"add-note\"\r\n                    className={classes.root}\r\n                    onKeyPress={preventSubmit}\r\n                >\r\n                    Add task\r\n                </Button>\r\n            </ThemeProvider>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport  default TodoCreator;","import React from 'react';\r\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport BookmarkIcon from '@material-ui/icons/Bookmark';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        width: '100%',\r\n        backgroundColor: '#f5f5f5',\r\n        padding: 0\r\n    },\r\n    li: {\r\n        borderBottom: '1px dashed black'\r\n    }\r\n}));\r\n\r\nconst TodoList = ({ theme, todos, completeTodo, editTodo, deleteTodo, saveTodo, noteRef, preventSubmit }) => {\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = React.useState([0]);\r\n    let UniqKey = 123;\r\n\r\n\r\n    const handleToggle = (value, inx) => () => {\r\n        const currentIndex = checked.indexOf(value);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        setChecked(newChecked);\r\n        completeTodo(inx);\r\n    };\r\n\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <List className={classes.root}>\r\n            {todos.map((todo, inx) => {\r\n                const labelId = `list-todo-${todo}`;\r\n\r\n                return (\r\n                    <ListItem\r\n                        key={`todo-${UniqKey++}`}\r\n                        role={undefined}\r\n                        dense\r\n                        button\r\n                        className={classes.li}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <Checkbox\r\n                                color=\"primary\"\r\n                                edge=\"start\"\r\n                                checked={checked.indexOf(todo) !== -1}\r\n                                tabIndex={-1}\r\n                                disableRipple\r\n                                inputProps={{ 'aria-labelledby': labelId }}\r\n                                onClick={handleToggle(todo, inx)}\r\n                                onKeyPress={preventSubmit}\r\n                            />\r\n                        </ListItemIcon>\r\n                        {\r\n                            (!todo.isEditing) ?\r\n                                <>\r\n                                    <ListItemText\r\n                                        id={labelId}\r\n                                        primary={`${todo.text}`}\r\n                                        style={{textDecoration: todo.isCompleted ? \"line-through\" : \"\"}}\r\n                                    />\r\n                                    <ListItemIcon>\r\n                                        <IconButton\r\n                                            edge=\"end\"\r\n                                            aria-label=\"edit\"\r\n                                            onClick={() => editTodo(inx)}\r\n                                        >\r\n                                            <EditIcon/>\r\n                                        </IconButton>\r\n                                    </ListItemIcon>\r\n                                </>\r\n                                :\r\n                                <>\r\n                                    <input\r\n                                        className=\"form__edit-input\"\r\n                                        defaultValue={todo.text}\r\n                                        ref={(element) => noteRef.current[inx] = element}\r\n                                        onKeyPress={preventSubmit}\r\n                                    />\r\n                                    <ListItemIcon>\r\n                                        <IconButton onClick={() => saveTodo(inx)} edge=\"end\" aria-label=\"delete\">\r\n                                            <BookmarkIcon />\r\n                                        </IconButton>\r\n                                    </ListItemIcon>\r\n                                </>\r\n                        }\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton onClick={() => deleteTodo(inx)} edge=\"end\" aria-label=\"delete\">\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                );\r\n            })}\r\n        </List>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import  React, { useState, useEffect, useRef } from 'react';\r\nimport TodoCreator from \"./FormInput\";\r\nimport TodoList from \"./List\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: { main: '#000000' },\r\n    },\r\n});\r\n\r\nconst Form = () => {\r\n\r\n    const [ newTodo, setNewTodo ] = useState('');\r\n    const [ todos, setTodos ] = useState([\r\n        {\r\n            text: \"Learn about React\",\r\n            isCompleted: false,\r\n            isEditing: false\r\n        },\r\n        {\r\n            text: \"Meet friend for lunch\",\r\n            isCompleted: false,\r\n            isEditing: false\r\n        },\r\n        {\r\n            text: \"Build really cool todo app\",\r\n            isCompleted: false,\r\n            isEditing: false\r\n        }\r\n    ]);\r\n    const inputRef = useRef();\r\n    const noteRef = useRef({});\r\n    const [ isInputEmpty, setInputEmpty ] = useState(false)\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        addTodo(newTodo);\r\n        clearInput();\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const preventSubmit = e => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n        }\r\n    };\r\n\r\n    const addTodo = text => {\r\n        if ( text !== '') {\r\n            const newTodos = [...todos, { text }]\r\n            setNewTodo('')\r\n            setTodos(newTodos);\r\n        } else {\r\n            console.log('text', text)\r\n            setInputEmpty(true);\r\n        }\r\n    };\r\n\r\n    const removeTodo = inx => {\r\n        const newArr = [...todos]\r\n        newArr.splice(inx, 1)\r\n        setTodos(newArr)\r\n    }\r\n\r\n    const completeTodo = inx => {\r\n        const newTodos = [...todos];\r\n        newTodos[inx].isCompleted = !newTodos[inx].isCompleted;\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    const editTodo = inx => {\r\n        const newTodos = [...todos];\r\n        newTodos[inx].isEditing = !newTodos[inx].isEditing;\r\n        setTodos(newTodos);\r\n    }\r\n\r\n    const saveTodo = (inx) => {\r\n        const newTodos = [...todos];\r\n        newTodos[inx].isEditing = !newTodos[inx].isEditing;\r\n        newTodos[inx].text = noteRef.current[inx].value;\r\n        setTodos(newTodos);\r\n    }\r\n\r\n    const clearInput = () => {\r\n        setNewTodo('');\r\n    }\r\n\r\n    const setTodo = todo => {\r\n        setInputEmpty(false);\r\n        setNewTodo(todo);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n    }, [todos])\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"form\">\r\n\r\n                <TodoCreator\r\n                    theme={theme}\r\n                    todo={newTodo}\r\n                    setTodo={setTodo}\r\n                    clearInput={clearInput}\r\n                    inputRef={inputRef}\r\n                    isInputEmpty={isInputEmpty}\r\n                    preventSubmit={preventSubmit}\r\n                />\r\n\r\n                <TodoList\r\n                    theme={theme}\r\n                    todos={todos}\r\n                    completeTodo={completeTodo}\r\n                    editTodo={editTodo}\r\n                    deleteTodo={removeTodo}\r\n                    saveTodo={saveTodo}\r\n                    noteRef={noteRef}\r\n                    preventSubmit={preventSubmit}\r\n                />\r\n            </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import './App.css';\nimport Form from \"./components/Form\";\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <h1>Todo List</h1>\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}